<project name="CAB302-MazeDesignTool" default="dist" basedir=".">
    <property name="src" location="src"/>
    <property name="lib" location="lib"/>
    <property name="tests" location="tests"/>

    <property name="build" location="build"/>
    <property name="dist" location="dist"/>
    <property name="docs" location="docs"/>
    <property name="testClasses" location="testClasses"/>
    <property name="testOut" location="testOut"/>

    <!--JUnit path variables-->
    <property name="junitJar" value="lib/junit-jupiter-api-5.4.2.jar" />
    <property name="junitPlatformJar" value="lib/junit-platform-commons-1.4.2.jar" />
    <property name="opentestJar" value="lib/opentest4j-1.1.1.jar" />
    <property name="apiguardianJar" value="lib/apiguardian-api-1.0.0.jar" />
    <property name="junitJar" value="${junitJar}:${junitPlatformJar}:${opentestJar}:${apiguardianJar}" />

    <!--Class path for compiling-->
    <path id="compile.path">
        <fileset dir="lib">
            <include name="*.jar" />
        </fileset>
    </path>

    <!--Class path for compiling unit tests-->
    <path id="unit.test.path">
        <path refid="compile.path"/>
        <pathelement path="test"/>
    </path>

    <!--Creates directories-->
    <target name="init">
        <mkdir dir="${build}"/>
        <mkdir dir="${testClasses}"/>
        <mkdir dir="${testOut}"/>
    </target>

    <!--Compiles src files-->
    <target name="compile" depends="init">
        <javac srcdir="${src}" classpath="${build}:${junitJar}" destdir="${build}" includeantruntime="false">
            <include name="Main.java"/>
            <include name="Maze/*.java"/>
            <include name="GUI/*.java"/>
            <include name="Database/*.java"/>
        </javac>
    </target>

    <!--Compile unit test files-->
    <target name="compileTests" depends="compile">
        <javac srcdir="${tests}" destdir="${testClasses}" classpath="${build}:${junitJar}">
            <include name="CellNodeTest.java"/>
            <include name="CellTest.java"/>
            <include name="MazeTest.java"/>
            <!--Can't get database tests to compile properly without mariadb driver-->
            <!--<include name="DatabaseTest.java"/>-->
        </javac>
    </target>

    <!--Run unit tests-->
    <target name="runTests" depends="compileTests">
        <junitlauncher printSummary="true" failureProperty="junit.failure">
            <classpath>
                <pathelement path="${testClasses}:${build}" />
                <pathelement path="${junitJar}" />
            </classpath>
            <testclasses outputDir="${testClasses}">
                <fileset dir="${testClasses}"/>
                <listener type="legacy-xml"/>
            </testclasses>
        </junitlauncher>
        <fail if="junit.failure" message="junit tests failed - aborting"/>
    </target>

    <!--Generate javadoc-->
    <target name="generateDoc">
        <javadoc packagenames="Database, GUI, Maze"
                 sourcepath="${src}"
                 destdir="${docs}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="Maze Design Tool">
            <doctitle><![CDATA[<h1>Maze Design Tool</h1>]]></doctitle>
        </javadoc>
    </target>


    <!--Generate distribution files and folder-->
    <target name="dist" depends="runTests">
        <!-- Make a copy of all relevant files -->
        <copyfile src="lib/mariadb-java-client-3.0.5.jar" dest="${dist}/mariadb-java-client-3.0.5.jar"/>
        <copyfile src="launch.bat" dest="${dist}/launch.bat"/>
        <copyfile src="README.md" dest="${dist}/README.md"/>
        <touch file="${dist}/db.props"/>

        <jar jarfile="${dist}/MazeDesignTool.jar" basedir="${build}">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <!-- Application entry point - maybe redundant -->
                <attribute name="Main-Class" value="Main"/>
            </manifest>
        </jar>
    </target>

    <!--Clean up all folders that were generated by ant-->
    <target name="clean" description="clean up">
        <!--Delete the generated directory trees-->
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
        <delete dir="${testClasses}"/>
        <delete dir="${testOut}"/>
        <delete dir="${docs}"/>
        <delete dir="export"/>
    </target>
</project>